name: GitHub Classroom Workflow

on: 
  push:
    branches:
    - '*'
    - '!status'
    - '!feedback'

  # deployment:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # job to run autograding
  grade:
    name: Autograding
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2

      # delete and recreate result dir
      - name: Reset results dir
        run: |
          rm -rf .github/results
          mkdir -p .github/results

      # test activity 1 - enable gh pages
      - uses: actions/github-script@v5
        name: "Check Activity 1 - Enable GH Pages"
        id: activity1
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let result = 'fail';
            let pageURL = '';
            let sourceBranch = '';
            let sourcePath = '';

            // get pages
            try {
              const res = await github.rest.repos.getPages({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              console.log(`Get pages response: ${res.status}`);

              if (res.status == '200') {
                console.log(`Found GitHub Pages site`)
                pageURL = res.data.html_url;
                sourceBranch = res.data.source.branch;
                sourcePath = res.data.source.path;
                console.log(`Pages URL: ${pageURL}`);
                console.log(`Source branch: ${sourceBranch}`);
                console.log(`Source path  : ${sourcePath}`);

                if (sourceBranch == 'main' && sourcePath == '/docs') {
                  // write result to file
                  const fs = require('fs');
                  fs.writeFile('.github/results/activity1.txt', 'pass', function (err) {
                    if (err) return console.log(err);
                  });
                  result = 'success';
                }
              }
            }
            catch(err) {
              console.log(err);
            }

            core.setOutput('url', pageURL);
            core.setOutput('branch', sourceBranch);
            core.setOutput('path', sourcePath);
            return result;
          result-encoding: string

      - name: Get page outputs
        run: |
          echo "${{steps.activity1.outputs.url}}"
          echo "${{steps.activity1.outputs.branch}}"
          echo "${{steps.activity1.outputs.path}}"

      # get repo team members
      # need a PAT scoped to read:org to get team list and team members
      - uses: actions/github-script@v5
        name: "Get Team Members"
        id: team-members
        with:
          github-token: ${{secrets.READORG}}
          script: |
            let members = [];

            try {
              // get repo teams
              const resTeams = await github.rest.repos.listTeams({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              console.log(`List teams response: ${resTeams.status}`);

              // make assumption assignment team will be first in list
              const teamSlug = resTeams.data[0].slug;
              console.log(`Team slug: ${teamSlug}`);

              // get team members
              const resMembers = await github.rest.teams.listMembersInOrg({
                org: context.repo.owner,
                team_slug: teamSlug,
              });
              console.log(`List members response: ${resMembers.status}`);

              members = resMembers.data.map(item => { return item.login })
              console.log(`Members: ${members}`);

            }
            catch(err) {
              console.log(err);
            }

            return members;
      - run: echo "${{steps.team-members.outputs.result}}"





      # # test activity 2 - commits
      # - uses: actions/github-script@v5
      #   name: "Check Activity 2"
      #   id: activity2
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       pass
        # foreach member
        #   filter commits author
        #     filter commits new file
        # output
        # - list members not make commit


      # test activity 3 - open PR
        # output
        # - list members not open PR


      # test activity 4 - comment on PR
      # get all PR
      # foreach member
      #   filter out PR author
      #    get all PR comments
        # output
        # - list members not commented on PR


      # test activity 5 - merge commit
      # get all merge commits
      # filter members not author of merge
        # output
        # - list members not make merge commit

      

      # run grading
      # add id to step so outputs can be referenced
      - uses: education/autograding@v1
        name: "** Grading and Feedback **"
        id: autograding
        continue-on-error: true

    outputs:
      grading-score: ${{ steps.autograding.outputs.Points }}
      activity1-result: ${{ steps.activity1.outputs.result }}
      pages-url: ${{ steps.activity1.outputs.url }}
      pages-branch: ${{ steps.activity1.outputs.branch }}
      pages-path: ${{ steps.activity1.outputs.path }}
      team-members: ${{ steps.team-members.outputs.result }}

  # job to get repo info: default branch, feedback pr number
  repo-info:
    name: Get Repo Info
    runs-on: ubuntu-latest
    steps:
      # pause to wait for classroom bot to setup feedback PR
      - if: ${{ github.actor == 'github-classroom[bot]' }}
        run: sleep 30

      # Default branch is usually 'main', but in case it isn't get default branch name
      - name: Get default branch name
        uses: actions/github-script@v5
        id: default-branch-name
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // get default branch
            const repo = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log(`Get repo response - status: ${repo.status}`);
            return repo.data.default_branch;
          result-encoding: string

      # context repository {
      #   "master_branch": "main",
      #   }

      - run: echo "Default branch name - ${{ steps.default-branch-name.outputs.result }}"

      # find PR if it exists
      - name: Find PR number
        uses: markpatterson27/find-pull-request-action@pre-pr-release
        id: check-pr
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          title: Feedback
          base: feedback
          branch: ${{ steps.default-branch-name.outputs.result }}
          state: all
      - run: echo ${{ steps.check-pr.outputs.number }}

      # re-open PR if closed
      - name: Re-open PR
        if: ${{ steps.check-pr.outputs.state == 'closed' }}
        uses: actions/github-script@v5
        env:
            PR_NUMBER: ${{ steps.check-pr.outputs.number }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: process.env.PR_NUMBER,
              state: 'open'
            });

    outputs:
      default-branch-name: ${{ steps.default-branch-name.outputs.result }}
      feedback-pr: ${{ steps.check-pr.outputs.number }}

  # job to build activity status icons and update pages URL
  update-activity-status:
    name: Update Activity Statuses
    runs-on: ubuntu-latest
    if: always()
    needs: [grade, repo-info]
    steps:
      # need to checkout whole repo
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # switch to main branch
      - name: Switch to main branch
        run: git checkout ${{ needs.repo-info.outputs.default-branch-name }}

      # update pages URL
      - name: update Pages URL
        if: ${{ needs.grade.outputs.pages-url != '' }}
        run: |
          replace="When enabled, your site will be available at: \`https:\/\/<org name>.github.io\/<repo name>\`"
          with="Your site is available at: [${{ needs.grade.outputs.pages-url }}](${{ needs.grade.outputs.pages-url }})"
          sed -i "s|^$replace|$with|g" README.md

      # un-update pages URL if gh pages disabled after enabling
      - name: un-update Pages URL
        if: ${{ needs.grade.outputs.pages-url == '' }}
        run: |
          IFS='/' read -ra repoArray <<< "$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
          replace="Your site is available at: \[https:\/\/${repoArray[0]}.github.io\/${repoArray[1]}\/\](https:\/\/${repoArray[0]}.github.io\/${repoArray[1]}\/)"
          with="When enabled, your site will be available at: \`https:\/\/<org name>.github.io\/<repo name>\`"
          sed -i "s|^$replace|$with|g" README.md

      # commit and push pages url if changed
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Updated pages URL" || exit 0
          git push origin ${{ needs.repo-info.outputs.default-branch-name }}

      # switch to status branch
      - run: git checkout status || git checkout -b status

      # make dir for activity status icons
      - name: make icons dir
        run: mkdir -p .github/activity-icons

      # make/copy activity 1 icon
      - name: activity 1 icon
        run: |
          echo ${{ needs.grade.outputs.activity1-result }}
          if ${{ needs.grade.outputs.activity1-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity1.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity1.svg
          fi
      
      # make/copy activity 2 icon
      - name: activity 2 icon
        run: |
          echo ${{ needs.grade.outputs.activity2-result }}
          if ${{ needs.grade.outputs.activity2-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity2.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity2.svg
          fi

      # make/copy activity 3 icon
      - name: activity 3 icon
        run: |
          echo ${{ needs.grade.outputs.activity3-result }}
          if ${{ needs.grade.outputs.activity3-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity3.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity3.svg
          fi

      # make/copy activity 4 icon
      - name: activity 4 icon
        run: |
          echo ${{ needs.grade.outputs.activity4-result }}
          if ${{ needs.grade.outputs.activity4-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity4.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity4.svg
          fi

      # make/copy activity 5 icon
      - name: activity 5 icon
        run: |
          echo ${{ needs.grade.outputs.activity5-result }}
          if ${{ needs.grade.outputs.activity5-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity5.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity5.svg
          fi

      # create points bar
      - name: points bar
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.grade.outputs.grading-score }}
          path: '.github/activity-icons/points-bar.svg'

      # commit and push activity icons if statuses have changed
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add '.github/activity-icons'
          git commit -m "Add/Update activity icons" || exit 0
          git push origin status

  # job to post feedback message in Feedback PR
  # Classroom will create the PR when assignment accepted. PR should be issue 1.
  post-feedback:
    name: Post Feedback Comment
    runs-on: ubuntu-latest
    # run even if autograding fails. only run on main branch and if pr exists.
    if: ${{ always() && needs.repo-info.outputs.feedback-pr != '' && github.ref == 'refs/heads/main' && github.actor != 'github-classroom[bot]' }}
    needs: [grade, repo-info]
    steps:
      # checkout files so can access template
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # read template
      - uses: markpatterson27/markdown-to-output@v1
        id: mto
        with:
          filepath: .github/templates/pr_feedback.md

      # set feedback var
      # activity 1 feedback
      - name: activity 1 feedback
        run: |
          if ${{ needs.grade.outputs.activity1-result == 'success' }}; then
            message="${{ steps.mto.outputs.activity1-success }}"
            status="${{ steps.mto.outputs.status-success }}"
          else
            if ${{ needs.grade.outputs.pages-url != '' }}; then
              message="${{ steps.mto.outputs.activity1-fail-2 }}"
            else
              message="${{ steps.mto.outputs.activity1-fail }}"
            fi
            status="${{ steps.mto.outputs.status-fail }}"
          fi
          echo "$message"
          echo '$message'
          echo ${message}
          echo "fb-activity1=$(/bin/bash .github/scripts/escape.sh "$message")" >> $GITHUB_ENV
          echo "status-activity1=$(/bin/bash .github/scripts/escape.sh "$status")" >> $GITHUB_ENV

      # list team members
      - name: list team members
        run: |
          IFS=',][' read -ra teamMembers <<< "${{ needs.grade.outputs.team-members }}"
          members="$(printf -- "- %s\n" "${teamMembers[@]:1}")"
          echo "team-members=$(/bin/bash .github/scripts/escape.sh "$members")" >> $GITHUB_ENV

      # replace tokens
      # read template file and replace tokens. token replacement based on env name.
      - name: prepare comment and substitute tokens
        id: prep
        uses: actions/github-script@v5
        env:
          pagesurl: ${{ needs.grade.outputs.pages-url }}
          pages-branch: ${{ needs.grade.outputs.pages-branch }}
          pages-path: ${{ needs.grade.outputs.pages-path }}
          points: ${{ needs.grade.outputs.grading-score }}
          template: ${{ steps.mto.outputs.body }}
        with:
          script: |
            const fs = require('fs')
            let commentBody = process.env.template

            for (envName in process.env) {
              commentBody = commentBody.replace("${"+envName+"}", process.env[envName]
                .replace(/%0D/g, '\r')
                .replace(/%0A/g, '\n')
                .replace(/%25/g, '\%'))
            }

            return commentBody
          result-encoding: string

      # hide old feedback comments
      - name: hide old feedback comments
        uses: kanga333/comment-hider@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_number: ${{ needs.repo-info.outputs.feedback-pr }}

      # post comment on feedback PR. issues and PRs have same numbers
      - name: post comment
        uses: actions/github-script@v5
        env:
          MESSAGE: ${{ steps.prep.outputs.result }}
          ISSUE: ${{ needs.repo-info.outputs.feedback-pr }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { MESSAGE, ISSUE } = process.env
            await github.rest.issues.createComment({
              issue_number: process.env.ISSUE,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${MESSAGE}`
            })
